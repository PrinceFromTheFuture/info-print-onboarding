/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    appUsers: AppUser;
    sections: Section;
    questions: Question;
    templates: Template;
    submissions: Submission;
    media: Media;
    assignments: Assignment;
    groups: Group;
    visits: Visit;
    messages: Message;
    conversations: Conversation;
    appUserConfigs: AppUserConfig;
    users: User;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    appUsers: AppUsersSelect<false> | AppUsersSelect<true>;
    sections: SectionsSelect<false> | SectionsSelect<true>;
    questions: QuestionsSelect<false> | QuestionsSelect<true>;
    templates: TemplatesSelect<false> | TemplatesSelect<true>;
    submissions: SubmissionsSelect<false> | SubmissionsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    assignments: AssignmentsSelect<false> | AssignmentsSelect<true>;
    groups: GroupsSelect<false> | GroupsSelect<true>;
    visits: VisitsSelect<false> | VisitsSelect<true>;
    messages: MessagesSelect<false> | MessagesSelect<true>;
    conversations: ConversationsSelect<false> | ConversationsSelect<true>;
    appUserConfigs: AppUserConfigsSelect<false> | AppUserConfigsSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "appUsers".
 */
export interface AppUser {
  id: string;
  appUserConfig?: (string | null) | AppUserConfig;
  isApproved: boolean;
  name: string;
  email: string;
  role?: ('admin' | 'customer') | null;
  assignedTemplates?: (string | Template)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "appUserConfigs".
 */
export interface AppUserConfig {
  id: string;
  companyName: string;
  administratorFullName: string;
  administratorEmail: string;
  administratorPhone: string;
  companyWebsiteUrl: string;
  printingShopSpecializations: {
    specialization?: string | null;
    id?: string | null;
  }[];
  currentSalesTax: number;
  quickBooksSyncing?: boolean | null;
  quickBooksSyncingOptions?: ('quickbooksOnline' | 'quickbooksDesktop' | 'quickbooksEnterprise') | null;
  requestedDomain: string;
  logo: string | Media;
  contactAndCompanyList: string | Media;
  inventoryList: string | Media;
  machineInformation: string | Media;
  additionalProductPricingInformation: string | Media;
  currentMISWorkflow: string;
  otherFeatures?:
    | {
        feature: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  uploadedBy?: (string | null) | AppUser;
  alt?: string | null;
  extention?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "templates".
 */
export interface Template {
  id: string;
  name: string;
  description?: string | null;
  sections?: (string | Section)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sections".
 */
export interface Section {
  id: string;
  title: string;
  description: string;
  order?: number | null;
  groups?: (string | Group)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "groups".
 */
export interface Group {
  id: string;
  title?: string | null;
  order?: number | null;
  showIf?: {
    question?: (string | null) | Question;
    equalTo?: string | null;
  };
  questions?: (string | Question)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "questions".
 */
export interface Question {
  id: string;
  title: string;
  order: number;
  label?: string | null;
  required?: boolean | null;
  selectOptions?:
    | {
        value?: string | null;
        id?: string | null;
      }[]
    | null;
  type?: ('text' | 'number' | 'select' | 'date' | 'image' | 'checkbox') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "submissions".
 */
export interface Submission {
  id: string;
  question?: (string | null) | Question;
  answeredBy?: (string | null) | AppUser;
  /**
   * The answer value submitted by the user
   */
  answer?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "assignments".
 */
export interface Assignment {
  id: string;
  template?: (string | null) | Template;
  appUser?: (string | null) | AppUser;
  status?: ('inProgress' | 'submitted' | 'pending') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "visits".
 */
export interface Visit {
  id: string;
  appUser?: (string | null) | AppUser;
  type?: ('mobile' | 'desktop') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "messages".
 */
export interface Message {
  id: string;
  content?: string | null;
  sentBy?: (string | null) | AppUser;
  attachments?: (string | Media)[] | null;
  read?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "conversations".
 */
export interface Conversation {
  id: string;
  title?: string | null;
  createBy?: (string | null) | AppUser;
  isArchived?: boolean | null;
  description?: string | null;
  status?: ('resolved' | 'open') | null;
  messages?: (string | Message)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'appUsers';
        value: string | AppUser;
      } | null)
    | ({
        relationTo: 'sections';
        value: string | Section;
      } | null)
    | ({
        relationTo: 'questions';
        value: string | Question;
      } | null)
    | ({
        relationTo: 'templates';
        value: string | Template;
      } | null)
    | ({
        relationTo: 'submissions';
        value: string | Submission;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'assignments';
        value: string | Assignment;
      } | null)
    | ({
        relationTo: 'groups';
        value: string | Group;
      } | null)
    | ({
        relationTo: 'visits';
        value: string | Visit;
      } | null)
    | ({
        relationTo: 'messages';
        value: string | Message;
      } | null)
    | ({
        relationTo: 'conversations';
        value: string | Conversation;
      } | null)
    | ({
        relationTo: 'appUserConfigs';
        value: string | AppUserConfig;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "appUsers_select".
 */
export interface AppUsersSelect<T extends boolean = true> {
  appUserConfig?: T;
  isApproved?: T;
  name?: T;
  email?: T;
  role?: T;
  assignedTemplates?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sections_select".
 */
export interface SectionsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  order?: T;
  groups?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "questions_select".
 */
export interface QuestionsSelect<T extends boolean = true> {
  title?: T;
  order?: T;
  label?: T;
  required?: T;
  selectOptions?:
    | T
    | {
        value?: T;
        id?: T;
      };
  type?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "templates_select".
 */
export interface TemplatesSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  sections?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "submissions_select".
 */
export interface SubmissionsSelect<T extends boolean = true> {
  question?: T;
  answeredBy?: T;
  answer?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  uploadedBy?: T;
  alt?: T;
  extention?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "assignments_select".
 */
export interface AssignmentsSelect<T extends boolean = true> {
  template?: T;
  appUser?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "groups_select".
 */
export interface GroupsSelect<T extends boolean = true> {
  title?: T;
  order?: T;
  showIf?:
    | T
    | {
        question?: T;
        equalTo?: T;
      };
  questions?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "visits_select".
 */
export interface VisitsSelect<T extends boolean = true> {
  appUser?: T;
  type?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "messages_select".
 */
export interface MessagesSelect<T extends boolean = true> {
  content?: T;
  sentBy?: T;
  attachments?: T;
  read?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "conversations_select".
 */
export interface ConversationsSelect<T extends boolean = true> {
  title?: T;
  createBy?: T;
  isArchived?: T;
  description?: T;
  status?: T;
  messages?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "appUserConfigs_select".
 */
export interface AppUserConfigsSelect<T extends boolean = true> {
  companyName?: T;
  administratorFullName?: T;
  administratorEmail?: T;
  administratorPhone?: T;
  companyWebsiteUrl?: T;
  printingShopSpecializations?:
    | T
    | {
        specialization?: T;
        id?: T;
      };
  currentSalesTax?: T;
  quickBooksSyncing?: T;
  quickBooksSyncingOptions?: T;
  requestedDomain?: T;
  logo?: T;
  contactAndCompanyList?: T;
  inventoryList?: T;
  machineInformation?: T;
  additionalProductPricingInformation?: T;
  currentMISWorkflow?: T;
  otherFeatures?:
    | T
    | {
        feature?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}